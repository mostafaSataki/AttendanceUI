// Attendance Management System Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Authentication
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  personnel Personnel?

  @@map("users")
}

// Personnel Management
model Personnel {
  id              String   @id @default(cuid())
  personnelNumber String   @unique
  cardNumber      String   @unique
  fullName        String
  email           String   @unique
  phone           String?
  position        String?
  department      String?
  orgUnitId       String?
  shiftId         String?
  workGroupId     String?
  isActive        Boolean  @default(true)
  hireDate        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  orgUnit         OrgUnit?  @relation(fields: [orgUnitId], references: [id])
  shift           Shift?    @relation(fields: [shiftId], references: [id])
  workGroup       WorkGroup? @relation(fields: [workGroupId], references: [id])
  attendanceLogs  AttendanceLog[]
  leaveRequests   LeaveRequest[]
  missionRequests MissionRequest[]
  dailySummaries  DailySummary[]

  @@map("personnel")
}

// Organization Structure
model OrgUnit {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      OrgUnit?  @relation("OrgUnitChildren", fields: [parentId], references: [id])
  children    OrgUnit[] @relation("OrgUnitChildren")
  personnel   Personnel[]

  @@map("org_units")
}

// Shift Management
model Shift {
  id          String   @id @default(cuid())
  name        String
  startTime   String   // Format: "HH:MM"
  endTime     String   // Format: "HH:MM"
  gracePeriod Int?     // Minutes
  isNightShift Boolean  @default(false)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  personnel   Personnel[]
  workGroupShifts WorkGroupShiftAssignment[]

  @@map("shifts")
}

// Work Groups
model WorkGroup {
  id            String   @id @default(cuid())
  name          String
  description   String?
  repeatPeriod  Int      // Number of days in the cycle
  calendarId    String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  calendar      Calendar? @relation(fields: [calendarId], references: [id])
  personnel     Personnel[]
  assignments   WorkGroupShiftAssignment[]

  @@map("work_groups")
}

// Work Group Shift Assignments
model WorkGroupShiftAssignment {
  id        String   @id @default(cuid())
  workGroupId String
  dayIndex  Int      // 0-based index within the repeat period
  shiftId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workGroup WorkGroup @relation(fields: [workGroupId], references: [id], onDelete: Cascade)
  shift     Shift     @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([workGroupId, dayIndex])
  @@map("work_group_shift_assignments")
}

// Calendars
model Calendar {
  id          String   @id @default(cuid())
  name        String
  year        Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  holidays    Holiday[]
  workGroups  WorkGroup[]

  @@unique([name, year])
  @@map("calendars")
}

// Holidays
model Holiday {
  id          String   @id @default(cuid())
  calendarId  String
  name        String
  date        String   // Format: "YYYY-MM-DD"
  isRecurring Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@map("holidays")
}

// Leave Types
model LeaveType {
  id              String   @id @default(cuid())
  name            String
  description     String?
  requiresDocument Boolean  @default(false)
  maxDays         Int?
  isPaid          Boolean  @default(true)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  leaveRequests LeaveRequest[]

  @@map("leave_types")
}

// Mission Types
model MissionType {
  id              String   @id @default(cuid())
  name            String
  description     String?
  requiresDocument Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  missionRequests MissionRequest[]

  @@map("mission_types")
}

// Attendance Logs
model AttendanceLog {
  id        String           @id @default(cuid())
  personnelId String
  logTime   DateTime         // Exact timestamp of the log
  logType   AttendanceLogType
  deviceId  String?
  isManual  Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  personnel Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  @@map("attendance_logs")
}

// Daily Summaries
model DailySummary {
  id                String   @id @default(cuid())
  personnelId        String
  date              String   // Format: "YYYY-MM-DD"
  shiftId           String?
  totalPresence     String   // Format: "HH:MM"
  totalDelay        String   // Format: "HH:MM"
  totalOvertime     String   // Format: "HH:MM"
  status            AttendanceStatus
  firstIn           String?
  lastOut           String?
  rawLogsCount      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  personnel Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  shift     Shift?    @relation(fields: [shiftId], references: [id])

  @@unique([personnelId, date])
  @@map("daily_summaries")
}

// Leave Requests
model LeaveRequest {
  id              String           @id @default(cuid())
  personnelId      String
  leaveTypeId      String
  startDate        String           // Format: "YYYY-MM-DD"
  endDate          String           // Format: "YYYY-MM-DD"
  startTime        String?          // Format: "HH:MM"
  endTime          String?          // Format: "HH:MM"
  isHourly         Boolean          @default(false)
  description      String?
  documentPath     String?
  status           RequestStatus    @default(PENDING)
  rejectReason     String?
  approverId       String?
  approverName     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  personnel Personnel  @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  leaveType LeaveType  @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

// Mission Requests
model MissionRequest {
  id              String           @id @default(cuid())
  personnelId      String
  missionTypeId    String
  startDate        String           // Format: "YYYY-MM-DD"
  endDate          String           // Format: "YYYY-MM-DD"
  startTime        String?          // Format: "HH:MM"
  endTime          String?          // Format: "HH:MM"
  isHourly         Boolean          @default(false)
  description      String?
  destination      String?
  estimatedCost    Float?
  documentPath     String?
  status           RequestStatus    @default(PENDING)
  rejectReason     String?
  approverId       String?
  approverName     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  personnel   Personnel    @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  missionType MissionType @relation(fields: [missionTypeId], references: [id], onDelete: Cascade)

  @@map("mission_requests")
}

// Enums
enum Role {
  USER
  MANAGER
  ADMIN
}

enum AttendanceLogType {
  IN
  OUT
  BREAK_IN
  BREAK_OUT
}

enum AttendanceStatus {
  COMPLETE
  ABSENT
  INCOMPLETE
  LEAVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}